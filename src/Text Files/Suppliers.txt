import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, CardContent, Typography, Alert } from '@mui/material';

const RequiredProductsStockAlerts = () => {
    const [alerts, setAlerts] = useState([]);

    useEffect(() => {
        const fetchData = async () => {
            try {
                // Fetch all products and inventory data
                const productsResponse = await axios.get('/api/products');
                const inventoryResponse = await axios.get('/api/inventory');
                const rawMaterialStockResponse = await axios.get('/api/rawMaterialStock');

                const products = productsResponse.data;
                const inventory = inventoryResponse.data;
                const rawMaterialStock = rawMaterialStockResponse.data;

                // Dictionary to hold total required quantities of raw materials across all products
                const requiredRawMaterials = {};

                // Map inventory data to calculate total required raw materials
                inventory.forEach(item => {
                    const { productId, requiredQuantity } = item;
                    
                    // Only process products with required quantity greater than 0
                    if (requiredQuantity > 0) {
                        // Find the corresponding product by productId
                        const product = products.find(p => p.prodId === productId);
                        
                        if (product) {
                            product.rawMaterials.forEach(material => {
                                const rawMaterialName = material.rawMaterial.materialName;
                                const quantityNeededPerUnit = material.rawMaterialQuantity;
                                const totalQuantityNeeded = requiredQuantity * quantityNeededPerUnit;
                                
                                // Accumulate the total required quantity for each raw material
                                if (!requiredRawMaterials[rawMaterialName]) {
                                    requiredRawMaterials[rawMaterialName] = 0;
                                }
                                requiredRawMaterials[rawMaterialName] += totalQuantityNeeded;
                            });
                        }
                    }
                });

                // Array to hold any stock alerts that need to be shown
                const stockAlerts = [];

                // Compare required raw materials with available stock
                Object.keys(requiredRawMaterials).forEach(materialName => {
                    const totalRequired = requiredRawMaterials[materialName];
                    const stockItem = rawMaterialStock.find(stock => stock.rawMaterial.materialName === materialName);
                    const availableQuantity = stockItem ? stockItem.quantity : 0;

                    // If available stock is less than required stock, show an alert
                    if (availableQuantity < totalRequired) {
                        stockAlerts.push(
                            `Insufficient stock for ${materialName}: Required ${totalRequired} units, but only ${availableQuantity} units are available.`
                        );
                    }
                });

                // Set alerts to be displayed in the UI
                setAlerts(stockAlerts);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();
    }, []);

    return (
        <Card sx={{ m: 3, p: 2 }}>
            <CardContent>
                <Typography variant="h5" gutterBottom>
                    Required Products Stock Alerts
                </Typography>
                {alerts.length > 0 ? (
                    alerts.map((alert, index) => (
                        <Alert severity="warning" key={index} sx={{ mb: 1 }}>
                            {alert}
                        </Alert>
                    ))
                ) : (
                    <Typography>No stock issues detected for required products.</Typography>
                )}
            </CardContent>
        </Card>
    );
};

export default RequiredProductsStockAlerts;
