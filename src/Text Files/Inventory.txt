import React, { useState } from "react";
import {
    Button, Box, TextField, MenuItem, Grid, Snackbar, Alert
} from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import dayjs from "dayjs";
import axios from "axios";

const NewSignUp = () => {
    const genders = [
        { label: "Male", value: "male" },
        { label: "Female", value: "female" },
        { label: "Other", value: "other" },
    ];

    const positions = [
        { label: "Supervisor", value: "supervisor" },
        { label: "Inventory manager", value: "Inventory manager" },
        { label: "Quality Assurance Manager", value: "Quality Assurance Manager" },
    ];

    const [formData, setFormData] = useState({
        firstName: "",
        lastName: "",
        gender: "",
        position: "",
        dateOfBirth: dayjs(),
        email: "",
        password: "",
        confirmPassword: "",
        phoneNumber: "",
    });

    const [formErrors, setFormErrors] = useState({});
    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
    const [emailError, setEmailError] = useState('');  // Email error state

    const handleSnackbarClose = () => setSnackbar({ ...snackbar, open: false });

    // Function to check if email already exists
    const handleEmailBlur = async () => {
        if (!formData.email) return; // Skip check if email is empty

        try {
            const response = await axios.get("/api/users");
            const existingUser = response.data.find(user => user.email === formData.email);
            
            if (existingUser) {
                setEmailError("User with this email already exists.");
            } else {
                setEmailError('');
            }
        } catch (error) {
            console.error("Error checking email:", error);
            setEmailError("Unable to verify email. Please try again later.");
        }
    };

    const validateForm = () => {
        const errors = {};

        if (!formData.firstName) errors.firstName = "First name is required.";
        if (!formData.lastName) errors.lastName = "Last name is required.";
        if (!formData.gender) errors.gender = "Gender is required.";
        if (!formData.position) errors.position = "Position is required.";
        if (!formData.dateOfBirth || !dayjs(formData.dateOfBirth).isValid()) {
            errors.dateOfBirth = "Valid date of birth is required.";
        }

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!formData.email) {
            errors.email = "Email is required.";
        } else if (!emailRegex.test(formData.email)) {
            errors.email = "Email is not valid.";
        }

        if (!formData.password) {
            errors.password = "Password is required.";
        } else if (formData.password.length < 6) {
            errors.password = "Password must be at least 6 characters.";
        }

        if (!formData.confirmPassword) {
            errors.confirmPassword = "Confirm password is required.";
        } else if (formData.password !== formData.confirmPassword) {
            errors.confirmPassword = "Passwords do not match.";
        }

        const phoneRegex = /^\d{10}$/;
        if (!formData.phoneNumber) {
            errors.phoneNumber = "Phone number is required.";
        } else if (!phoneRegex.test(formData.phoneNumber)) {
            errors.phoneNumber = "Phone number must be 10 digits.";
        }

        setFormErrors(errors);
        return Object.keys(errors).length === 0;
    };

    const handleChange = (event) => {
        const { name, value } = event.target;
        setFormData({
            ...formData,
            [name]: value,
        });
    };

    const handleDateChange = (date) => setFormData({ ...formData, dateOfBirth: date });

    const handleSubmit = async (event) => {
        event.preventDefault();
        if (emailError) return;  // Prevent submission if email already exists
        if (!validateForm()) return;  // Validate form fields

        try {
            const response = await axios.post('/api/users', {
                ...formData,
                dateOfBirth: formData.dateOfBirth.format('YYYY-MM-DD'), 
            });
            console.log('User successfully signed up:', response.data);
            setSnackbar({ open: true, message: 'Signup successful!', severity: 'success' });
        } catch (error) {
            console.error('There was an error submitting the form:', error);
            setSnackbar({ open: true, message: 'Signup failed. Please try again.', severity: 'error' });
        }
    };

    return (
        <div className="signup-container" style={{ height: "100vh", display: "flex", justifyContent: "center", alignItems: "center", backgroundColor: "#e8dede"}}>
            <Box sx={{ width: "80%", maxWidth: 900, padding: 3, boxShadow: "0px 4px 12px rgba(0, 0, 0, 0.1)", borderRadius: "10px" }}>
                <Grid container spacing={0}>
                    <Grid item xs={12} md={6}>
                        <h2 style={{ textAlign: 'center' }}><strong>Sign Up</strong></h2>
                        <form onSubmit={handleSubmit}>
                            <Box sx={{ '& > :not(style)': { m: 1, width: '85%' } }}>
                                {/* First Name, Last Name, Gender, Position fields here */}
                                
                                {/* Email Field */}
                                <TextField
                                    label="example@gmail.com"
                                    variant="filled"
                                    name="email"
                                    value={formData.email}
                                    onChange={handleChange}
                                    onBlur={handleEmailBlur}  // Check email on blur
                                    required
                                    error={!!emailError}
                                    helperText={emailError || formErrors.email}
                                />

                                {/* Other fields (password, confirmPassword, phone number, etc.) here */}

                                {/* Submit Button */}
                                <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: 2 }}>
                                    <Button variant="contained" color="secondary" type="submit">
                                        Submit
                                    </Button>
                                </Box>
                            </Box>
                        </form>
                    </Grid>
                    {/* Right Side - Image */}
                    <Grid item xs={12} md={6}>
                        <Box component="img" src="https://img.freepik.com/free-photo/picture-frame-by-velvet-armchair_53876-132788.jpg" alt="Signup illustration" sx={{ width: "100%", height: "100%", objectFit: "cover", borderRadius: "10px" }} />
                    </Grid>
                </Grid>
            </Box>

            {/* Snackbar for notifications */}
            <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={handleSnackbarClose} anchorOrigin={{ vertical: 'top', horizontal: 'right' }}>
                <Alert onClose={handleSnackbarClose} severity={snackbar.severity} sx={{ width: '80%', maxWidth: '700px' }}>
                    {snackbar.message}
                </Alert>
            </Snackbar>
        </div>
    );
};

export default NewSignUp;
